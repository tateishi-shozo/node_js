1:配列[1, 2, 3]を用意して、合計値を出すコードを記述せよ
2:配列[1, 2, 3]を用意して、平均値を出すコードを記述せよ
3:配列[1, 2, 3, 4, 5, 6]を用意して、一番大きい数値を返却するコードを記述せよ
4:配列[1, 2, 3, 4, 5, 6]を用意して、一番小さい数値を返却するコードを記述せよ
5:配列[1, 2, 3, 4, 5, 6]を[6, 5, 4, 3, 2, 1]に(逆順)並び替えるコードを記述せよ
6:配列[1, 2, 3]の累積を求め、[1, 3, 6]に変換するコードを記述せよ
7:配列[1, 2, 3, true, false, "xx", "dff"]を用意して、数値だけに変換し合計値を出すコードを記述せよ
8:配列[1, 2, 3, 4, 5, 6]を用意して、偶数ならtrue, 奇数ならfalseに変換するコードを記述せよ
9:配列の中身が全て同じならTrue, そうでないならFalseを返却するコードを記述せよ
10:フィボナッチ数列を実装せよ


1 うるう年かどうかを判定するコードを実装せよ
2 バブルソートを実装せよ
3 バケツソートを実装せよ
4 線型探索を実装せよ
5 二分木を使って深さ優先探索を実装せよ
6 ヒープソートを実装せよ
7 マージソートを実装せよ
8 2,3, 6, 7で実装したソート群を速度計測して分析せよ


調査するソート群:
バブルソート
ヒープソート
マージソート
sort() メソッド(jsに組み込まれてるやつ)

配列のデータ数: 5000
中の値: 数値の乱数値(範囲:0~100000)

以下のケースに関して、それぞれ測定すること

ケース1: 既にソート済みの場合
ケース２： 未ソートの場合
ケース3: 逆順にソート済みの場合

測定項目：
平均値算出は、５回まででOK
速度(MAX)
速度(MIN)
速度(平均)

測定項目から、「xxの状況ならxxのソートを使うのが良い」という結論を導き出してください

※自動で計測するコードを書いてくれてもOKです